/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package com.mycompany.trabalho_analisador_sintatico_artur_pedro_ryudi;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Caret;
/**
 *
 * @author Bebeto
 */
public class Tela2 extends javax.swing.JFrame {

    /**
     * Creates new form Tela2
     */
    public Tela2() {
        initComponents();
        this.tln = new TextLineNumber(painelEditavel);
        this.setLocationRelativeTo(null);
        this.setTitle("Compilador");
        jScrollPane1.setRowHeaderView(tln);
        painelEditavel.setText("");
    }

    private String resultado;

    private String painelTextSaved;
    private String selectPainelEditavel;
    private String bufferPainelEditavel;
    
    private Analisador_lexico analisadorLexico;
    private Analisador_sintatico analisadorSintatico;
    private TextLineNumber tln;


    public String getPainelTextSaved() {
        return painelTextSaved;
    }

    private File file;

    public File getFile() {
        return file;
    }

    public void setFile(File file) {
        this.file = file;
    }

    public void setPainelTextSaved(String painelTextSaved) {
        this.painelTextSaved = painelTextSaved;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        painelEditavel = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        terminal = new javax.swing.JTextArea();
        ContadorLC = new javax.swing.JLabel();
        nomeArquivo = new javax.swing.JLabel();
        botaoCompilar = new javax.swing.JButton();
        Icon icon2 = new ImageIcon("./src/main/java/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/PLAY.png");
        botaoExecutar = new JButton(icon2);
        botaoIconSalvar = new javax.swing.JButton();
        botaoIconCortar = new javax.swing.JButton();
        botaoIconCopiar = new javax.swing.JButton();
        botaoIconColar = new javax.swing.JButton();
        botaoIconBoia = new javax.swing.JButton();
        botaoIconNovo = new javax.swing.JButton();
        botaoIconAbrir = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        listaArquivo = new javax.swing.JMenu();
        botaoNovo = new javax.swing.JMenuItem();
        botaoAbrir = new javax.swing.JMenuItem();
        botaoSalvar = new javax.swing.JMenuItem();
        botaoSalvarComo = new javax.swing.JMenuItem();
        botaoSair = new javax.swing.JMenuItem();
        listaEdição = new javax.swing.JMenu();
        botaoCopiar = new javax.swing.JMenuItem();
        botaoColar = new javax.swing.JMenuItem();
        botaoRecortar = new javax.swing.JMenuItem();
        listaCompilacao = new javax.swing.JMenu();
        botaoMenuCompilar = new javax.swing.JMenuItem();
        botaoMenuExecutar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setAlignmentX(0.0F);

        painelEditavel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        painelEditavel.setAutoscrolls(false);
        painelEditavel.setMinimumSize(new java.awt.Dimension(13, 20));
        painelEditavel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                painelEditavelMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                painelEditavelMouseReleased(evt);
            }
        });
        painelEditavel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                painelEditavelKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                painelEditavelKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(painelEditavel);

        jScrollPane3.setToolTipText("");
        jScrollPane3.setColumnHeaderView(null);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(60, 30));

        terminal.setEditable(false);
        terminal.setColumns(1);
        terminal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        terminal.setRows(1);
        terminal.setTabSize(1);
        terminal.setToolTipText("");
        terminal.setMinimumSize(new java.awt.Dimension(13, 20));
        terminal.setName(""); // NOI18N
        terminal.setVerifyInputWhenFocusTarget(false);
        jScrollPane3.setViewportView(terminal);

        ContadorLC.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ContadorLC.setText("Contador de linha e coluna");

        nomeArquivo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        nomeArquivo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nomeArquivo.setText("Nome do arquivo");
        nomeArquivo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        botaoCompilar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/gerramenta_32bit.png"))); // NOI18N
        botaoCompilar.setAlignmentY(0.0F);
        botaoCompilar.setMargin(new java.awt.Insets(2, 0, 3, 0));
        botaoCompilar.setMaximumSize(new java.awt.Dimension(32, 32));
        botaoCompilar.setMinimumSize(new java.awt.Dimension(32, 32));
        botaoCompilar.setPreferredSize(new java.awt.Dimension(32, 32));
        botaoCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCompilarActionPerformed(evt);
            }
        });

        botaoExecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/Play.png"))); // NOI18N
        botaoExecutar.setAlignmentY(0.0F);
        botaoExecutar.setMargin(new java.awt.Insets(2, 0, 3, 0));
        botaoExecutar.setMaximumSize(new java.awt.Dimension(32, 32));
        botaoExecutar.setMinimumSize(new java.awt.Dimension(32, 32));
        botaoExecutar.setPreferredSize(new java.awt.Dimension(32, 32));
        botaoExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExecutarActionPerformed(evt);
            }
        });

        botaoIconSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/Save_(1).png"))); // NOI18N
        botaoIconSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIconSalvarActionPerformed(evt);
            }
        });

        botaoIconCortar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/Cut_(1).png"))); // NOI18N
        botaoIconCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIconCortarActionPerformed(evt);
            }
        });

        botaoIconCopiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/Copy_(1).png"))); // NOI18N
        botaoIconCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIconCopiarActionPerformed(evt);
            }
        });

        botaoIconColar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/Paste_(1).png"))); // NOI18N
        botaoIconColar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIconColarActionPerformed(evt);
            }
        });

        botaoIconBoia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/Boia_(1).png"))); // NOI18N
        botaoIconBoia.setPreferredSize(new java.awt.Dimension(32, 32));
        botaoIconBoia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIconBoiaActionPerformed(evt);
            }
        });

        botaoIconNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/New_(1).png"))); // NOI18N
        botaoIconNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIconNovoActionPerformed(evt);
            }
        });

        botaoIconAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/trabalho_analisador_sintatico_artur_pedro_ryudi/Images/Open_(1).png"))); // NOI18N
        botaoIconAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIconAbrirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ContadorLC, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botaoIconNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(botaoIconAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(botaoIconSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoIconCortar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(botaoIconCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(botaoIconColar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(botaoExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoIconBoia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botaoIconBoia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIconColar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIconCortar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIconSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIconAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIconNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIconCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ContadorLC)
                    .addComponent(nomeArquivo)))
        );

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        listaArquivo.setText("Arquivo");
        listaArquivo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        botaoNovo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoNovo.setText("Novo");
        botaoNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoNovoActionPerformed(evt);
            }
        });
        listaArquivo.add(botaoNovo);

        botaoAbrir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoAbrir.setText("Abrir");
        botaoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAbrirActionPerformed(evt);
            }
        });
        listaArquivo.add(botaoAbrir);

        botaoSalvar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoSalvar.setText("Salvar");
        botaoSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSalvarActionPerformed(evt);
            }
        });
        listaArquivo.add(botaoSalvar);

        botaoSalvarComo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoSalvarComo.setText("Salvar como");
        botaoSalvarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSalvarComoActionPerformed(evt);
            }
        });
        listaArquivo.add(botaoSalvarComo);

        botaoSair.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoSair.setText("Sair");
        botaoSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSairActionPerformed(evt);
            }
        });
        listaArquivo.add(botaoSair);

        jMenuBar1.add(listaArquivo);

        listaEdição.setText("Edição");
        listaEdição.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        botaoCopiar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoCopiar.setText("Copiar");
        botaoCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCopiarActionPerformed(evt);
            }
        });
        listaEdição.add(botaoCopiar);

        botaoColar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoColar.setText("Colar");
        botaoColar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoColarActionPerformed(evt);
            }
        });
        listaEdição.add(botaoColar);

        botaoRecortar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoRecortar.setText("Recortar");
        botaoRecortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRecortarActionPerformed(evt);
            }
        });
        listaEdição.add(botaoRecortar);

        jMenuBar1.add(listaEdição);

        listaCompilacao.setText("Compilação");
        listaCompilacao.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        botaoMenuCompilar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoMenuCompilar.setText("Compilar");
        botaoMenuCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMenuCompilarActionPerformed(evt);
            }
        });
        listaCompilacao.add(botaoMenuCompilar);

        botaoMenuExecutar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botaoMenuExecutar.setText("Executar");
        botaoMenuExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMenuExecutarActionPerformed(evt);
            }
        });
        listaCompilacao.add(botaoMenuExecutar);

        jMenuBar1.add(listaCompilacao);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoNovoActionPerformed
        if (painelEditavel.getText().equals("")) {
            painelEditavel.setText("");
            terminal.setText("");
        } else {
            this.setPainelTextSaved(painelEditavel.getText());
            Tela_Salvar telaSalvar = new Tela_Salvar(this, true, this.getPainelTextSaved());
            int salvar = telaSalvar.getSalvar();
            File file = telaSalvar.getFile();
            this.setFile(file);
            String texto = this.getPainelTextSaved();
            telaSalvar.setPainelTextSaved(texto);
            if (salvar == 0) {
                this.painelTextSaved = painelEditavel.getText();
                painelEditavel.setText("");
                terminal.setText("");
                this.setFile(null);
            }
            if (salvar == 1) {
                nomeArquivo.setText("Nome Arquivo");
                painelEditavel.setText("");
                terminal.setText("");
                this.setFile(null);
            }
        }
    }//GEN-LAST:event_botaoNovoActionPerformed

    private void botaoCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCompilarActionPerformed
        StringReader reader = new StringReader(painelEditavel.getText());
        if (this.analisadorLexico == null) {
            this.analisadorLexico = new Analisador_lexico(reader);
        } else {
            analisadorLexico.ReInit(reader);
        }
        try {
            resultado = analisadorLexico.Analisador_lexico();
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
        terminal.setText(resultado);
        int qtdErros = analisadorLexico.getSizeLinhasErro();
        if (qtdErros > 0) {
            if (qtdErros == 1) {
                terminal.append("Não foi compilado pois ocorreu um erro lexico.\n");
            } else {
                terminal.append("Não foi compilado pois ocorreram " + analisadorLexico.getSizeLinhasErro() + " erros lexicos.\n");
            }
            for (int i = 0; i < analisadorLexico.getSizeLinhasErro(); i++) {
                terminal.append("Erro lexico na linha: " + analisadorLexico.getLinhasErro(i) + " | coluna: " + analisadorLexico.getColunasErro(i) + " - " + analisadorLexico.getTokensErro(i) + "\n");
            }
        } else if (painelEditavel.getText().equals("")) {
            terminal.append("Nada a compilar.");
        } else {
            if (this.analisadorSintatico == null) {
                this.analisadorSintatico = new Analisador_sintatico(reader);
            } else {
                analisadorSintatico.ReInit(reader);
            }
            try {
                analisadorSintatico.Analisador_sintatico();
            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
            terminal.append("\nCompilado com sucesso!");
        }
        analisadorLexico.limpaArrays();
    }//GEN-LAST:event_botaoCompilarActionPerformed

    private void botaoExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExecutarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoExecutarActionPerformed

    private void botaoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAbrirActionPerformed
        if (painelEditavel.getText().equals("")) {
            JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos de Texto (.txt)", "txt");
            int res = fc.showOpenDialog(this);
            if (res == JFileChooser.APPROVE_OPTION) {
                File arquivo = fc.getSelectedFile();
                String fileName = arquivo.getName();
                String conteudo = "";
                try (BufferedReader reader = new BufferedReader(new FileReader(arquivo))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        conteudo += line + "\n";
                    }
                    this.painelEditavel.setText(conteudo);
                    this.nomeArquivo.setText(fileName);
                } catch (IOException ioException) {
                    JOptionPane.showMessageDialog(this, "Erro ao abrir o arquivo: " + ioException.getMessage());
                }
                this.setFile(arquivo);
            }
        } else {
            this.setPainelTextSaved(painelEditavel.getText());
            Tela_Salvar telaSalvar = new Tela_Salvar(this, true, this.getPainelTextSaved());
            int salvar = telaSalvar.getSalvar();
            File file = telaSalvar.getFile();
            this.setFile(file);
            String texto = this.getPainelTextSaved();
            telaSalvar.setPainelTextSaved(texto);
            if (salvar == 0) {
                this.painelTextSaved = painelEditavel.getText();
                painelEditavel.setText("");
                terminal.setText("");
                this.setFile(null);
            }
            if (salvar == 1) {
                nomeArquivo.setText("Nome Arquivo");
                painelEditavel.setText("");
                terminal.setText("");
                this.setFile(null);
                JFileChooser fc = new JFileChooser();
                fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos de Texto (.txt)", "txt");
                int res = fc.showOpenDialog(this);
                if (res == JFileChooser.APPROVE_OPTION) {
                    File arquivo = fc.getSelectedFile();
                    String fileName = arquivo.getName();
                    String conteudo = "";
                    try (BufferedReader reader = new BufferedReader(new FileReader(arquivo))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            conteudo += line + "\n";
                        }
                        this.painelEditavel.setText(conteudo);
                        this.nomeArquivo.setText(fileName);
                    } catch (IOException ioException) {
                        JOptionPane.showMessageDialog(this, "Erro ao abrir o arquivo: " + ioException.getMessage());
                    }
                    this.setFile(arquivo);
                }
            }
        }
    }//GEN-LAST:event_botaoAbrirActionPerformed

    private void botaoSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSalvarActionPerformed
        File file = this.getFile();
        if (file != null) {
            if (!file.getName().toLowerCase().endsWith(".txt")) {
                JOptionPane.showMessageDialog(this, "Por favor, salve o arquivo com a extensão .txt");
                return;
            }

            try (FileWriter writer = new FileWriter(file)) {
                String texto = this.painelEditavel.getText();
                writer.write(texto);
                JOptionPane.showMessageDialog(this, "Arquivo salvo com sucesso!");
            } catch (IOException ioException) {
                JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + ioException.getMessage());
            }
        } else {
            JFileChooser fc = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos de Texto (.txt)", "txt");
            fc.setFileFilter(filter);
            fc.setAcceptAllFileFilterUsed(false);

            int res = fc.showSaveDialog(this);
            if (res == JFileChooser.APPROVE_OPTION) {
                File arquivo = fc.getSelectedFile();
                String filepath = arquivo.getPath();

                if (!filepath.toLowerCase().endsWith(".txt")) {
                    arquivo = new File(filepath + ".txt");
                }

                this.setFile(arquivo);

                try (FileWriter writer = new FileWriter(arquivo)) {
                    String texto = painelEditavel.getText();
                    writer.write(texto);
                    JOptionPane.showMessageDialog(this, "Arquivo salvo com sucesso!");
                } catch (IOException ioException) {
                    JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + ioException.getMessage());
                }
            }
        }
    }//GEN-LAST:event_botaoSalvarActionPerformed

    private void botaoSalvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSalvarComoActionPerformed
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos de Texto (.txt)", "txt");
        fc.setFileFilter(filter);
        fc.setAcceptAllFileFilterUsed(false);
        int res = fc.showSaveDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            File arquivo = fc.getSelectedFile();
            String filepath = arquivo.getPath();
            if (!filepath.toLowerCase().endsWith(".txt")) {
                arquivo = new File(filepath + ".txt");
            }

            if (arquivo.exists()) {
                int resposta = JOptionPane.showConfirmDialog(this,
                        "O arquivo já existe. Deseja sobrescrevê-lo?",
                        "Confirmar Sobrescrita",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);

                if (resposta == JOptionPane.NO_OPTION) {
                    return;
                }
            }
            String filename = arquivo.getName();
            this.setFile(arquivo);
            this.nomeArquivo.setText(filename);

            try (FileWriter writer = new FileWriter(arquivo)) {
                String texto = painelEditavel.getText();
                writer.write(texto);
                JOptionPane.showMessageDialog(this, "Arquivo salvo com sucesso!");

                this.setTitle(arquivo.getName());
            } catch (IOException ioException) {
                JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + ioException.getMessage());
            }
        }
    }//GEN-LAST:event_botaoSalvarComoActionPerformed

    private void botaoSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSairActionPerformed
         Tela_Salvar telaSalvar = new Tela_Salvar(this, true, this.getPainelTextSaved());
        int salvar = telaSalvar.getSalvar();
        int select = telaSalvar.getSelect();
        if (salvar == 0) {
            this.painelTextSaved = painelEditavel.getText();
            if (select == 1) {
                this.dispose();
            }

        } else if (salvar == 1) {
            this.dispose();
        }
    }//GEN-LAST:event_botaoSairActionPerformed

    private void botaoCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCopiarActionPerformed
        bufferPainelEditavel = selectPainelEditavel;
    }//GEN-LAST:event_botaoCopiarActionPerformed

    private void botaoColarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoColarActionPerformed
        painelEditavel.insert(bufferPainelEditavel, painelEditavel.getCaretPosition());
    }//GEN-LAST:event_botaoColarActionPerformed

    private void botaoRecortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRecortarActionPerformed
        bufferPainelEditavel = selectPainelEditavel;
        painelEditavel.replaceSelection("");
    }//GEN-LAST:event_botaoRecortarActionPerformed

    
    private void botaoMenuCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoMenuCompilarActionPerformed
        StringReader reader = new StringReader(painelEditavel.getText());
        if (this.analisadorLexico == null) {
            this.analisadorLexico = new Analisador_lexico(reader);
        } else {
            analisadorLexico.ReInit(reader);
        }
        try {
            resultado = analisadorLexico.Analisador_lexico();
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
        terminal.setText(resultado);
        int qtdErros = analisadorLexico.getSizeLinhasErro();
        if (qtdErros > 0) {
            if (qtdErros == 1) {
                terminal.append("\nOcorreu um erro.\n");
            } else {
                terminal.append("\nOcorreram " + analisadorLexico.getSizeLinhasErro() + " erros.\n");
            }
            for (int i = 0; i < analisadorLexico.getSizeLinhasErro(); i++) {
                terminal.append("Erro lexico na linha: " + analisadorLexico.getLinhasErro(i) + " | coluna: " + analisadorLexico.getColunasErro(i) + " - " + analisadorLexico.getTokensErro(i) + "\n");
            }
        } else if (painelEditavel.getText().equals("")) {
            terminal.append("Nada a compilar.");
        } else {
            terminal.append("\nCompilado com sucesso!");
        }
        analisadorLexico.limpaArrays();
    }//GEN-LAST:event_botaoMenuCompilarActionPerformed

    private void botaoMenuExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoMenuExecutarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoMenuExecutarActionPerformed

    private void painelEditavelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelEditavelMouseClicked
        Caret pointer = painelEditavel.getCaret();
        String linhaCount = "";
        if (pointer.getMagicCaretPosition() != null) {
            String contador = "Linha: "
                    + (((pointer.getMagicCaretPosition().y) / 25) + 1)
                    + " | Coluna: "
                    + (((pointer.getMagicCaretPosition().x) / 9) + 1);
            ContadorLC.setText(contador);
            for(int i = 0;i<painelEditavel.getLineCount();i++){
                linhaCount += i+1 + "\n";
            }
        }
        selectPainelEditavel = painelEditavel.getSelectedText();
        painelEditavel.requestFocus();
    }//GEN-LAST:event_painelEditavelMouseClicked

    private void painelEditavelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_painelEditavelKeyReleased
        Caret pointer = painelEditavel.getCaret();
        String linhaCount = "";
        if (pointer.getMagicCaretPosition() != null) {
            String contador = "Linha: "
                    + (((pointer.getMagicCaretPosition().y) / 25) + 1)
                    + " | Coluna: "
                    + (((pointer.getMagicCaretPosition().x) / 9) + 1);
            ContadorLC.setText(contador);
            for(int i = 0;i<painelEditavel.getLineCount();i++){
                linhaCount += i+1 + "\n";
            }
        }
        selectPainelEditavel = painelEditavel.getSelectedText();
        painelEditavel.requestFocus();
    }//GEN-LAST:event_painelEditavelKeyReleased

    private void painelEditavelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelEditavelMouseReleased
        Caret pointer = painelEditavel.getCaret();
        String linhaCount = "";
        if (pointer.getMagicCaretPosition() != null) {
            String contador = "Linha: "
                    + (((pointer.getMagicCaretPosition().y) / 25) + 1)
                    + " | Coluna: "
                    + (((pointer.getMagicCaretPosition().x) / 9) + 1);
            ContadorLC.setText(contador);
            for(int i = 0;i<painelEditavel.getLineCount();i++){
                linhaCount += i+1 + "\n";
            }
        }
        selectPainelEditavel = painelEditavel.getSelectedText();
        painelEditavel.requestFocus();
    }//GEN-LAST:event_painelEditavelMouseReleased

    private void painelEditavelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_painelEditavelKeyPressed

    }//GEN-LAST:event_painelEditavelKeyPressed

    private void botaoIconNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIconNovoActionPerformed
        if (painelEditavel.getText().equals("")) {
            painelEditavel.setText("");
            terminal.setText("");
        } else {
            this.setPainelTextSaved(painelEditavel.getText());
            Tela_Salvar telaSalvar = new Tela_Salvar(this, true, this.getPainelTextSaved());
            int salvar = telaSalvar.getSalvar();
            File file = telaSalvar.getFile();
            this.setFile(file);
            String texto = this.getPainelTextSaved();
            telaSalvar.setPainelTextSaved(texto);
            if (salvar == 0) {
                this.painelTextSaved = painelEditavel.getText();
                painelEditavel.setText("");
                terminal.setText("");
                this.setFile(null);
            }
            if (salvar == 1) {
                nomeArquivo.setText("Nome Arquivo");
                painelEditavel.setText("");
                terminal.setText("");
                this.setFile(null);
            }
        }
    }//GEN-LAST:event_botaoIconNovoActionPerformed

    private void botaoIconAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIconAbrirActionPerformed
        if (painelEditavel.getText().equals("")) {
            JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos de Texto (.txt)", "txt");
            int res = fc.showOpenDialog(this);
            if (res == JFileChooser.APPROVE_OPTION) {
                File arquivo = fc.getSelectedFile();
                String fileName = arquivo.getName();
                String conteudo = "";
                try (BufferedReader reader = new BufferedReader(new FileReader(arquivo))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        conteudo += line + "\n";
                    }
                    this.painelEditavel.setText(conteudo);
                    this.nomeArquivo.setText(fileName);
                } catch (IOException ioException) {
                    JOptionPane.showMessageDialog(this, "Erro ao abrir o arquivo: " + ioException.getMessage());
                }
                this.setFile(arquivo);
            }
        } else {
            this.setPainelTextSaved(painelEditavel.getText());
            Tela_Salvar telaSalvar = new Tela_Salvar(this, true, this.getPainelTextSaved());
            int salvar = telaSalvar.getSalvar();
            File file = telaSalvar.getFile();
            this.setFile(file);
            String texto = this.getPainelTextSaved();
            telaSalvar.setPainelTextSaved(texto);
            if (salvar == 0) {
                this.painelTextSaved = painelEditavel.getText();
                painelEditavel.setText("");
                terminal.setText("");
                this.setFile(null);
            }
            if (salvar == 1) {
                nomeArquivo.setText("Nome Arquivo");
                painelEditavel.setText("");
                terminal.setText("");
                this.setFile(null);
                JFileChooser fc = new JFileChooser();
                fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos de Texto (.txt)", "txt");
                int res = fc.showOpenDialog(this);
                if (res == JFileChooser.APPROVE_OPTION) {
                    File arquivo = fc.getSelectedFile();
                    String fileName = arquivo.getName();
                    String conteudo = "";
                    try (BufferedReader reader = new BufferedReader(new FileReader(arquivo))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            conteudo += line + "\n";
                        }
                        this.painelEditavel.setText(conteudo);
                        this.nomeArquivo.setText(fileName);
                    } catch (IOException ioException) {
                        JOptionPane.showMessageDialog(this, "Erro ao abrir o arquivo: " + ioException.getMessage());
                    }
                    this.setFile(arquivo);
                }
            }
        }
    }//GEN-LAST:event_botaoIconAbrirActionPerformed

    private void botaoIconSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIconSalvarActionPerformed
        File file = this.getFile();
        if (file != null) {
            if (!file.getName().toLowerCase().endsWith(".txt")) {
                JOptionPane.showMessageDialog(this, "Por favor, salve o arquivo com a extensão .txt");
                return;
            }

            try (FileWriter writer = new FileWriter(file)) {
                String texto = this.painelEditavel.getText();
                writer.write(texto);
                JOptionPane.showMessageDialog(this, "Arquivo salvo com sucesso!");
            } catch (IOException ioException) {
                JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + ioException.getMessage());
            }
        } else {
            JFileChooser fc = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos de Texto (.txt)", "txt");
            fc.setFileFilter(filter);
            fc.setAcceptAllFileFilterUsed(false);

            int res = fc.showSaveDialog(this);
            if (res == JFileChooser.APPROVE_OPTION) {
                File arquivo = fc.getSelectedFile();
                String filepath = arquivo.getPath();

                if (!filepath.toLowerCase().endsWith(".txt")) {
                    arquivo = new File(filepath + ".txt");
                }

                this.setFile(arquivo);

                try (FileWriter writer = new FileWriter(arquivo)) {
                    String texto = painelEditavel.getText();
                    writer.write(texto);
                    JOptionPane.showMessageDialog(this, "Arquivo salvo com sucesso!");
                } catch (IOException ioException) {
                    JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + ioException.getMessage());
                }
            }
        }
    }//GEN-LAST:event_botaoIconSalvarActionPerformed

    private void botaoIconCortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIconCortarActionPerformed
        bufferPainelEditavel = selectPainelEditavel;
        painelEditavel.replaceSelection("");
    }//GEN-LAST:event_botaoIconCortarActionPerformed

    private void botaoIconCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIconCopiarActionPerformed
        bufferPainelEditavel = selectPainelEditavel;
    }//GEN-LAST:event_botaoIconCopiarActionPerformed

    private void botaoIconColarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIconColarActionPerformed
        painelEditavel.insert(bufferPainelEditavel, painelEditavel.getCaretPosition());
    }//GEN-LAST:event_botaoIconColarActionPerformed

    private void botaoIconBoiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIconBoiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoIconBoiaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ContadorLC;
    private javax.swing.JMenuItem botaoAbrir;
    private javax.swing.JMenuItem botaoColar;
    private javax.swing.JButton botaoCompilar;
    private javax.swing.JMenuItem botaoCopiar;
    private javax.swing.JButton botaoExecutar;
    private javax.swing.JButton botaoIconAbrir;
    private javax.swing.JButton botaoIconBoia;
    private javax.swing.JButton botaoIconColar;
    private javax.swing.JButton botaoIconCopiar;
    private javax.swing.JButton botaoIconCortar;
    private javax.swing.JButton botaoIconNovo;
    private javax.swing.JButton botaoIconSalvar;
    private javax.swing.JMenuItem botaoMenuCompilar;
    private javax.swing.JMenuItem botaoMenuExecutar;
    private javax.swing.JMenuItem botaoNovo;
    private javax.swing.JMenuItem botaoRecortar;
    private javax.swing.JMenuItem botaoSair;
    private javax.swing.JMenuItem botaoSalvar;
    private javax.swing.JMenuItem botaoSalvarComo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenu listaArquivo;
    private javax.swing.JMenu listaCompilacao;
    private javax.swing.JMenu listaEdição;
    private javax.swing.JLabel nomeArquivo;
    private javax.swing.JTextArea painelEditavel;
    private javax.swing.JTextArea terminal;
    // End of variables declaration//GEN-END:variables
}
