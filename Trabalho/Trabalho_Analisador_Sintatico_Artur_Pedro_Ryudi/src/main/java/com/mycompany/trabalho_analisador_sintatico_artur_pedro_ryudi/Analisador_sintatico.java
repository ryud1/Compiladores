package com.mycompany.trabalho_analisador_sintatico_artur_pedro_ryudi;/* Generated By:JavaCC: Do not edit this line. Analisador_lexicoTokenManager.java */

import java.util.ArrayList;

public class Analisador_sintatico implements Analisador_sintaticoConstants {
    public static void main(String[] Args)
    {
        Analisador_sintatico analisador2 = new Analisador_sintatico(System.in);
        analisador2.Analisador_sintatico();
    }
  private ArrayList<String> listaErroSintatico = new ArrayList<>();

  public ArrayList<String> getListaErros(){
      return this.listaErroSintatico;
  }

  final public void Analisador_sintatico() {
    jj_consume_token(MAKE);
    jj_consume_token(IDENTIFICADOR);
    DecConstVar();
    ListaComandos();
    jj_consume_token(END);
    jj_consume_token(PONTO);
    jj_consume_token(0);
  }

  final public void DecConstVar(){
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
    case VAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        ComecoConst();
        break;
      case VAR:
        ComecoVar();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void ComecoConst()  {
    DecConst();
    ComecoConstL();
  }

  final public void ComecoConstL()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      DecVar();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public void ComecoVar()  {
    DecVar();
    ComecoVarL();
  }

  final public void ComecoVarL()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      DecConst();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void DecVar()  {
    jj_consume_token(VAR);
    ListaVar();
    jj_consume_token(END);
    jj_consume_token(PONTO_E_VIRGULA);
  }

  final public void DecConst()  {
    jj_consume_token(CONST);
    ListaConst();
    jj_consume_token(END);
    jj_consume_token(PONTO_E_VIRGULA);
  }

  final public void ListaConst()  {
    Tipo();
    jj_consume_token(DOIS_PONTOS);
    ListaIdent();
    jj_consume_token(IGUAL);
    Valor();
    jj_consume_token(PONTO);
    ListaConstL();
  }

  final public void ListaConstL()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case REAL:
    case CHAR:
      ListaConst();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  final public void Tipo()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      
    }
  }

  final public void ListaIdent()  {
    jj_consume_token(IDENTIFICADOR);
    ListaIdentL();
  }

  final public void ListaIdentL()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      ListaIdent();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void Valor()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANTES_INT:
      jj_consume_token(CONSTANTES_INT);
      break;
    case CONSTANTES_FLOAT:
      jj_consume_token(CONSTANTES_FLOAT);
      break;
    case CONSTANTE_LITARAL_APOSTROFO:
      jj_consume_token(CONSTANTE_LITARAL_APOSTROFO);
      break;
    case CONSTANTE_LITARAL_ASPAS:
      jj_consume_token(CONSTANTE_LITARAL_ASPAS);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      
    }
  }

  final public void ListaVar()  {
    TipoB();
    jj_consume_token(DOIS_PONTOS);
    ListaIdent();
    jj_consume_token(PONTO);
    ListaVarL();
  }

  final public void ListaVarL()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case REAL:
    case CHAR:
    case BOOL:
      ListaVar();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void TipoB()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
    }
  }

  final public void ListaComandos()  {
    Comando();
    ListaComandosL();
  }

  final public void ListaComandosL()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GET:
    case PUT:
    case IF:
    case TRUE:
    case FALSE:
    case WHILE:
    case ABRE_PARENTESES:
    case EXCLAMACAO:
    case IDENTIFICADOR:
    case CONSTANTES_INT:
    case CONSTANTES_FLOAT:
    case CONSTANTE_LITARAL_ASPAS:
    case CONSTANTE_LITARAL_APOSTROFO:
      ListaComandos();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void Comando()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GET:
      Get();
      break;
    case PUT:
      Put();
      break;
    case IF:
      If();
      break;
    case WHILE:
      While();
      break;
    case TRUE:
    case FALSE:
    case ABRE_PARENTESES:
    case EXCLAMACAO:
    case IDENTIFICADOR:
    case CONSTANTES_INT:
    case CONSTANTES_FLOAT:
    case CONSTANTE_LITARAL_ASPAS:
    case CONSTANTE_LITARAL_APOSTROFO:
      Atribuicao();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      
    }
  }

  final public void Atribuicao()  {
    Expressao();
    jj_consume_token(ATRIBUICAO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PONTO);
  }

  final public void Get()  {
    jj_consume_token(GET);
    jj_consume_token(ABRE_PARENTESES);
    ListaIdent();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(PONTO);
  }

  final public void Put()  {
    jj_consume_token(PUT);
    jj_consume_token(ABRE_PARENTESES);
    ListaDecIdentConst();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(PONTO);
  }

  final public void ListaDecIdentConst()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      ListaDecIdentConstL();
      break;
    case CONSTANTES_INT:
    case CONSTANTES_FLOAT:
    case CONSTANTE_LITARAL_ASPAS:
    case CONSTANTE_LITARAL_APOSTROFO:
      Valor();
      ListaDecIdentConstL();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      
    }
  }

  final public void ListaDecIdentConstL()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      ListaDecIdentConst();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void If()  {
    jj_consume_token(IF);
    Expressao();
    jj_consume_token(THEN);
    ListaComandos();
    TemElse();
    jj_consume_token(END);
    jj_consume_token(PONTO);
  }

  final public void TemElse()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      ListaComandos();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void While()  {
    jj_consume_token(WHILE);
    Expressao();
    jj_consume_token(DO);
    ListaComandos();
    jj_consume_token(END);
    jj_consume_token(PONTO);
  }

  final public void Expressao()  {
    AritOuLogica();
    ExpressaoL();
  }

  final public void ExpressaoL()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
    case DIFERENTE:
    case MENOR:
    case MAIOR:
    case MENOR_IGUAL:
    case MAIOR_IGUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        AritOuLogica();
        break;
      case DIFERENTE:
        jj_consume_token(DIFERENTE);
        AritOuLogica();
        break;
      case MENOR:
        jj_consume_token(MENOR);
        AritOuLogica();
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
        AritOuLogica();
        break;
      case MENOR_IGUAL:
        jj_consume_token(MENOR_IGUAL);
        AritOuLogica();
        break;
      case MAIOR_IGUAL:
        jj_consume_token(MAIOR_IGUAL);
        AritOuLogica();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void AritOuLogica()  {
    Termo2();
    BaixaPrioridade();
  }

  final public void BaixaPrioridade()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIS:
    case MENOS:
    case BARRA_VERTICAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
        jj_consume_token(MAIS);
        Termo2();
        BaixaPrioridade();
        break;
      case MENOS:
        jj_consume_token(MENOS);
        Termo2();
        BaixaPrioridade();
        break;
      case BARRA_VERTICAL:
        jj_consume_token(BARRA_VERTICAL);
        Termo2();
        BaixaPrioridade();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void MediaPrioridade()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLICACAO:
    case DIVISAO:
    case DIVISAO_INTEIRA:
    case RESTO_DIVISAO_INTEIRA:
    case E_COMERCIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
        jj_consume_token(MULTIPLICACAO);
        Termo1();
        MediaPrioridade();
        break;
      case DIVISAO:
        jj_consume_token(DIVISAO);
        Termo1();
        MediaPrioridade();
        break;
      case DIVISAO_INTEIRA:
        jj_consume_token(DIVISAO_INTEIRA);
        Termo1();
        MediaPrioridade();
        break;
      case RESTO_DIVISAO_INTEIRA:
        jj_consume_token(RESTO_DIVISAO_INTEIRA);
        Termo1();
        MediaPrioridade();
        break;
      case E_COMERCIAL:
        jj_consume_token(E_COMERCIAL);
        Termo1();
        MediaPrioridade();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void Termo2()  {
    Termo1();
    MediaPrioridade();
  }

  final public void Termo1()  {
    Elemento();
    AltaPrioridade();
  }

  final public void AltaPrioridade()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPONENCIAL:
      jj_consume_token(EXPONENCIAL);
      Elemento();
      AltaPrioridade();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void Elemento()  {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case CONSTANTES_INT:
      jj_consume_token(CONSTANTES_INT);
      break;
    case CONSTANTES_FLOAT:
      jj_consume_token(CONSTANTES_FLOAT);
      break;
    case CONSTANTE_LITARAL_APOSTROFO:
      jj_consume_token(CONSTANTE_LITARAL_APOSTROFO);
      break;
    case CONSTANTE_LITARAL_ASPAS:
      jj_consume_token(CONSTANTE_LITARAL_ASPAS);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case ABRE_PARENTESES:
      jj_consume_token(ABRE_PARENTESES);
      Expressao();
      jj_consume_token(FECHA_PARENTESES);
      break;
    case EXCLAMACAO:
      jj_consume_token(EXCLAMACAO);
      jj_consume_token(ABRE_PARENTESES);
      Expressao();
      jj_consume_token(FECHA_PARENTESES);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      
    }
  }

  /** Generated Token Manager. */
  public   Analisador_sintaticoTokenManager token_source;
    SimpleCharStream jj_input_stream;
  /** Current token. */
  public   Token token;
  /** Next token. */
  public   Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x600,0x600,0x400,0x200,0x70000,0x70000,0x10000000,0x0,0xf0000,0xf0000,0x20b03800,0x20b03800,0x0,0x10000000,0x4000,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x20300000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0000,0x0,0x0,0xfc000,0xfc000,0xf8000,0x0,0x0,0xfc0,0xfc0,0x2001,0x2001,0x1036,0x1036,0x8,0xfc000,};
   }

  /** Constructor with InputStream. */
  public Analisador_sintatico(java.io.InputStream stream) {
      this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analisador_sintatico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Analisador_sintaticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
 }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analisador_sintatico(java.io.Reader stream) {
    if(jj_input_stream == null){
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
    }
  else{
    jj_input_stream.ReInit(stream, 1, 1);
  }
    token_source = new Analisador_sintaticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analisador_sintatico(Analisador_sintaticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Analisador_sintaticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind){
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    listaErroSintatico.add(generateParseException().getMessage());
    return null;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private   int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private   java.util.List jj_expentries = new java.util.ArrayList();
  private   int[] jj_expentry;
  private   int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
